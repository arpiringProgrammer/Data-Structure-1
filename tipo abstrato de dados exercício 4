arquivo.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "Failed.h"


/*
4) Implemente também um TAD Data para representar uma data específica do ano, armazenando
dia, mês e ano como inteiros. As seguintes operações devem ser implementadas:
a. atribui: Para atribuir valores para os campos (garanta que a data seja válida, retornado 1 se a data
for válida e false em caso contrário).
b. inc: aumentar a data em um dia;
c. dec: diminuir a data em um dia;
d. comparar: retorna true se duas datas são iguais e false caso contrário;
e. get: retorna a data no formato d/m/a.
Em seguida, faça um programa para testar o seu TAD.
*/

typedef Date* date;

int assignDay(date d, int day, int month, int year) {
	if (verifyDate(day, month, year) == 1) {
		d->day = day;
		d->month = month;
		d->year = year;
		return 1;
	}
	return 0;
}


int increaseDate(date d,int day, int month, int year) {
	if (month == 12) {
		if (day >= 1 && day <= 31) {
			if (day == 31) {
				year++;
				day = 1;
				month = 1;
			}
			else {
				day++;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {
		if (day >= 1 && day <= 31) {
			if (day == 31) {
				month++;
				day = 1;
			}
			else {
				day++;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 4 || month == 6 || month == 9 || month == 11) {
		if (day >= 1 && day <= 30) {
			if (day == 30) {
				month++;
				day = 1;
			}
			else {
				day++;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 2) {
		if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
			if (day >= 1 && day <= 29) {
				if (day == 29) {
					month++;
					day = 1;
				}
				else {
					day++;
				}
			}
			else {
				return 0;
			}
		}
		else {
			if (day >= 1 && day <= 28) {
				if (day == 28) {
					month++;
					day = 1;
				}
				else {
					day++;
				}
			}
			else {
				return 0;
			}
		}
	}
	else if (month < 1 || month > 12) {
		return 0;
	}

	d->day = day;
	d->month = month;
	d->year = year;
	return 1;
}

int decreaseDate(date d, int day, int month, int year) {
	if (month == 1) {
		if (day >= 1 && day <= 31) {
			if (day == 1) {
				year--;
				day = 31;
				month = 12;
			}
			else {
				day--;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
		if (day >= 1 && day <= 31) {
			if (day == 1) {
				month--;
				day = 31;
			}
			else {
				day--;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 4 || month == 6 || month == 9 || month == 11) {
		if (day >= 1 && day <= 30) {
			if (day == 1) {
				month--;
				day = 30;
			}
			else {
				day--;
			}
		}
		else {
			return 0;
		}
	}
	else if (month == 2) {
		if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
			if (day >= 1 && day <= 29) {
				if (day == 1) {
					month--;
					day = 29;
				}
				else {
					day--;
				}
			}
			else {
				return 0;
			}
		}
		else {
			if (day >= 1 && day <= 28) {
				if (day == 1) {
					month--;
					day = 28;
				}
				else {
					day--;
				}
			}
			else {
				return 0;
			}
		}
	}
	else if (month < 1 || month > 12) {
		return 0;
	}

	d->day = day;
	d->month = month;
	d->year = year;
	return 1;
}

int compareDay(date d1, date d2) {
	if (d1->day == d2->day && d1->month == d2->month && d1->year == d2->year) {
		return 1;
	}
	return 0;
}

/*int getData(date d, char data[]) {
	char* token;
	int day = 0, month = 0, year = 0;

	token = strtok(data, "/");
	day = atoi(token);
	

	token = strtok(NULL, "/");
	month = atoi(token);

	token = strtok(NULL, "/");
	year = atoi(token);

	if (verifyDate(day, month, year) == 1) {
		return 0;
	}

	getDay(d,day);
	getMonth(d, month);
	getYear(d, year);
	return 1;
}*/

int getDay(date d) {
	return d->day;
}

int getMonth(date d) {
	return d->month;
}

int getYear(date d) {
	return d->year;
}

int verifyDate(int day,int month, int year) {
	if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
		if (day < 1 || day > 31) {
			return 0;
		}
		else {
			return 1;
		}
	}
	else if (month == 4 || month == 6 || month == 9 || month == 11) {
		if (day < 1 || day > 30) {
			return 0;
		}
		else {
			return 1;
		}
	}
	else if (month == 2) {
		if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
			if (day < 1 || day > 29) {
				return 0;
			}
			else {
				return 1;
			}
		}
		else {
			if (day < 1 || day > 28) {
				return 0;
			}
			else {
				return 1;
			}
		}
	}
	return 0;
}

void printDate(date d) {
	printf("%d / %d / %d ", d->day, d->month, d->year);
}

arquivo.h:

#ifndef INCLUDED_H_FAILED
#define INCLUDED_H_FAILED

/*
4) Implemente também um TAD Data para representar uma data específica do ano, armazenando
dia, mês e ano como inteiros. As seguintes operações devem ser implementadas:
a. atribui: Para atribuir valores para os campos (garanta que a data seja válida, retornado 1 se a data
for válida e false em caso contrário).
b. inc: aumentar a data em um dia;
c. dec: diminuir a data em um dia;
d. comparar: retorna true se duas datas são iguais e false caso contrário;
e. get: retorna a data no formato d/m/a.
Em seguida, faça um programa para testar o seu TAD.
*/

typedef struct {
	int day;
	int month;
	int year;
}Date;

typedef Date* date;

int assignDay();

int decreaseDay();

int compareDay();

void getData(char data[]);

int verifyDate(int day, int month, int year);

#endif // INCLUDED_H_FAILED

main.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "Failed.h"

/*
4) Implemente também um TAD Data para representar uma data específica do ano, armazenando
dia, mês e ano como inteiros. As seguintes operações devem ser implementadas:
a. atribui: Para atribuir valores para os campos (garanta que a data seja válida, retornado 1 se a data
for válida e false em caso contrário).
b. inc: aumentar a data em um dia;
c. dec: diminuir a data em um dia;
d. comparar: retorna true se duas datas são iguais e false caso contrário;
e. get: retorna a data no formato d/m/a.
Em seguida, faça um programa para testar o seu TAD.
*/


int main() {
    // Criar duas instâncias de data
    Date date1, date2;
    date d1 = &date1;
    date d2 = &date2;

    // Testar a função de atribuição
    printf("Testando atribuição de data:\n");
    if (assignDay(d1, 31, 12, 2023)) {
        printf("Data 1 válida: ");
        printDate(d1);
        printf("\n");
    }
    else {
        printf("Data 1 inválida!\n");
    }

    if (assignDay(d2, 1, 1, 2024)) {
        printf("Data 2 válida: ");
        printDate(d2);
        printf("\n");
    }
    else {
        printf("Data 2 inválida!\n");
    }

    // Testar incremento de data
    printf("\nTestando incremento de data:\n");
    if (increaseDate(d1, d1->day, d1->month, d1->year)) {
        printf("Data 1 incrementada: ");
        printDate(d1);
        printf("\n");
    }
    else {
        printf("Erro ao incrementar Data 1!\n");
    }

    // Testar decremento de data
    printf("\nTestando decremento de data:\n");
    if (decreaseDate(d2, d2->day, d2->month, d2->year)) {
        printf("Data 2 decrementada: ");
        printDate(d2);
        printf("\n");
    }
    else {
        printf("Erro ao decrementar Data 2!\n");
    }

    // Testar comparação de datas
    printf("\nTestando comparação de datas:\n");
    if (compareDay(d1, d2)) {
        printf("As datas são iguais.\n");
    }
    else {
        printf("As datas são diferentes.\n");
    }

    // Exibir datas
    printf("\nTestando exibição de datas:\n");
    printf("Data 1: ");
    printDate(d1);
    printf("\nData 2: ");
    printDate(d2);
    printf("\n");

    return 0;
}

FORMA MAIS SIMPLIFICADA:

arquivo.h
                                                
#ifndef INCLUDED_H_DATA
#define INCLUDED_H_DATA

typedef struct {
    int day;
    int month;
    int year;
} Date;

typedef Date* date;

// Funções
int assignDay(date d, int day, int month, int year);
int increaseDate(date d);
int decreaseDate(date d);
int compareDate(date d1, date d2);
void printDate(date d);
int verifyDate(int day, int month, int year);

#endif // INCLUDED_H_DATA

arquivo.c:

#include <stdio.h>
#include "arquivo.h"

int assignDay(date d, int day, int month, int year) {
    if (verifyDate(day, month, year)) {
        d->day = day;
        d->month = month;
        d->year = year;
        return 1;
    }
    return 0;
}

int increaseDate(date d) {
    d->day++;
    if (!verifyDate(d->day, d->month, d->year)) {
        d->day = 1;
        d->month++;
        if (d->month > 12) {
            d->month = 1;
            d->year++;
        }
    }
    return 1;
}

int decreaseDate(date d) {
    d->day--;
    if (!verifyDate(d->day, d->month, d->year)) {
        d->month--;
        if (d->month < 1) {
            d->month = 12;
            d->year--;
        }
        d->day = (d->month == 2 && ((d->year % 4 == 0 && d->year % 100 != 0) || d->year % 400 == 0)) ? 29 : 28;
        if (d->month != 2) {
            d->day = (d->month == 4 || d->month == 6 || d->month == 9 || d->month == 11) ? 30 : 31;
        }
    }
    return 1;
}

int compareDate(date d1, date d2) {
    return (d1->day == d2->day && d1->month == d2->month && d1->year == d2->year);
}

void printDate(date d) {
    printf("%02d/%02d/%04d\n", d->day, d->month, d->year);
}

int verifyDate(int day, int month, int year) {
    if (month < 1 || month > 12) return 0;
    if (day < 1) return 0;

    int maxDays = (month == 2) ? ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0 ? 29 : 28)
                               : (month == 4 || month == 6 || month == 9 || month == 11 ? 30 : 31);

    return day <= maxDays;
}


main.c:

#include <stdio.h>
#include "arquivo.h"

int main() {
    Date d1;
    Date d2;

    assignDay(&d1, 31, 12, 2024);
    printDate(&d1);

    increaseDate(&d1);
    printDate(&d1);

    decreaseDate(&d1);
    printDate(&d1);

    assignDay(&d2, 31, 12, 2024);
    printf("Datas iguais? %s\n", compareDate(&d1, &d2) ? "Sim" : "Não");

    return 0;
}

