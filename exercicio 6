arquivo.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Failed.h"


/*
Construa um programa (main) que aloque em tempo de execução (dinamicamente) uma matriz de
ordem m x n (linha por coluna), usando 1+m chamadas a função malloc. Agora, aproveite este
programa para construir uma função que recebendo os parâmetros m e n aloque uma matriz de
ordem m x n e retorne um ponteiro para esta matriz alocada. Crie ainda uma função para liberar a
área de memória alocada pela matriz. Finalmente, crie um novo programa (main) que teste/use as
duas funções criadas acima.
*/
void mainFunction();

static int** createMatrix(int rows, int cols);

static void fillVector(int** matrix,int rows,int cows);

static void printVector(int** matrix, int rows, int cows);

static FILE* createFile();

static void printFile(int** matrix, int rows, int cows, FILE* file);

static void freeMatrix(int** matrix,int rows);



static int** createMatrix(int rows,int cols) {
    int** matrix = (int**)malloc(rows * sizeof(int*));
    if (!matrix) {
        return NULL;
    }

    for (int i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
        if (!matrix[i]) {
            for (int j = 0; j < i; j++) {
                free(matrix[j]);
            }
            free(matrix);
            return NULL;
        }
    }
    return matrix;
}

static void fillVector(int** matrix,int rows,int cows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cows; j++) {
            matrix[i][j] = i + j;
        }
    }
}

static void printVector(int** matrix,int rows,int cows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cows; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

static FILE* createFile() {
    FILE* file = fopen("file.txt", "rb+");
    if (!file) {
        file = fopen("file.txt", "wb+");
    }
    if (!file) {
        exit(1);
    }
    return file;
}

static void printFile(int** matrix,int rows,int cows,FILE* file) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cows; j++) {
            fprintf(file, "%d", matrix[i][j]);
        }
        fprintf(file, "\n");
    }
}

static void freeMatrix(int** matrix,int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

void mainFunction() {
    printf("\ncreating the matrix:\n");

    int rows = 4, cols = 4;

    int** matrix = createMatrix(rows, cols);

    printf("\nputting values in the function:\n");

    fillVector(matrix,rows,cols);

    printf("\ncreating a file to put the matrix:\n");

    FILE* file = createFile();

    printf("\nputting the values in a file:\n");

    printFile(matrix, rows, cols, file);
    fclose(file);

    printf("\nputting the values in the screen:\n");

    printVector(matrix,rows,cols);

    printf("\nreleasing the values of the matrix:\n");

    freeMatrix(matrix, rows);
}

int main() {
    mainFunction();
    return 0;
}

arquivo.h:

#ifndef INCLUDED_H_FAILED
#define INCLUDED_H_FAILED

#include <stdio.h>

void mainFunction();

static int** createMatrix(int,int);

static void fillVector(int**,int,int);

static void printVector(int**,int,int);

static FILE* createFile();

static void printFile(int**,int,int,FILE*);

static void freeMatrix(int**,int);


#endif // INCLUDED_H_FAILED
