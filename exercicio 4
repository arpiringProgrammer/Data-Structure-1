/*Faça um laço de entrada de dados, onde o usuário deve digitar uma sequência de números, sem
limite de quantidade de dados a ser fornecida. O usuário irá digitar os números um a um, sendo
que caso ele deseje encerrar a entrada de dados, ele irá digitar o número Zero. No final, todos os
dados digitados deverão ser salvos em um arquivo texto em disco. Atenção: os dados devem ser
armazenados na memória deste modo... faça com que o programa inicie criando um ponteiro para
um bloco (vetor) de 10 valores inteiros, e alocando dinamicamente espaço em memória para este
bloco; após, caso o vetor alocado esteja cheio; aloque um novo vetor do tamanho do vetor anterior
adicionado com espaço para mais 10 valores (tamanho N+10, onde N inicia com 10), copie os
valores já digitados da área inicial para esta área maior e libere a memória da área inicial; repita
este procedimento de expandir dinamicamente com mais 10 valores o vetor alocado cada vez que o
mesmo estiver cheio. Assim o vetor irá ser “expandido” de 10 em 10 valores. Usar a função
malloc para alocar memória de forma dinâmica.
*/

#include <stdio.h>
#include <stdlib.h>
#define SIZE 10

/*
*create the vector and it increases its size 
*/
int *createVector(int count) {
   int *vector = (int*)malloc(count * sizeof(int));
   
   if(!vector) {
      printf("an error ocurried.\n");
      return NULL;
   }
   return vector;
}



int main()
{
    int count = 0;
    int input = -1;
    FILE *file;
    int *vector = NULL;
    int *newVector = NULL;
    int size = SIZE;
    
    //fill the new create vector
    vector = createVector(size);
    
    //verify if the vector was created succesfully
    if(!vector) {
       printf("an error ocurried.\n");
       return 1;
    }
    
    printf("now inform the values of the vector.\n");
    
    //fill the vector with number values
    while(input != 0) {
       scanf("%d",&input);
       
       if(input == 0){
          break;
       }
       
       if(input != 0 && count%10 == 0) {
          size = count + SIZE;
          
            newVector = createVector(size); 
            
            for(int i = 0; i < count; i++) {
               newVector[i] = vector[i];
            }
            
            free(vector);
            
            vector = createVector(size);
            
            for(int i = 0; i < count; i++) {
               vector[i] = newVector[i];
            }
            
            free(newVector);
            
       }
       
         vector[count] = input;
       
       
       count++;
    }
    
    //create a file with the values of the vector
    file = fopen("info.txt","w");
    
    //put the values inside the vector and it also printf its value
    for(int i = 0; i < count; i++){
       fprintf(file,"%d",vector[i]);
       printf("values of the string:\t %d \n",vector[i]);
    }
    
    //release the memory alocated and close the file
    free(vector);
    fclose(file);

    return 0;
}

//outra versão:

arquivo.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Failed.h"
#define TEN 10

int* createVector(int size) {
    int* vector = (int*)malloc(sizeof(int) * size);
    if (!vector) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    return vector;
}

void fillVector(int** vector, int* count) {
    int capacity = TEN, value = 0;
    *vector = createVector(TEN);
    *count = 0;

    if (!(*vector)) {
        printf("An error occurred while trying to allocate memory!\n");
        exit(1);
    }

    printf("Please enter the values for the vector (enter 0 to stop):\n");
    do {
        scanf("%d", &value);
        if (value == 0) break;

        if (*count >= capacity) {
            capacity += TEN;
            int* newVector = createVector(capacity);
            if (!newVector) {
                printf("An error occurred while trying to create a larger vector!\n");
                free(*vector);
                exit(1);
            }
            for (int i = 0; i < *count; i++) {
                newVector[i] = (*vector)[i];
            }
            free(*vector);
            *vector = newVector;
        }
        (*vector)[*count] = value;
        (*count)++;

    } while (value != 0);
}

void saveFile(int* vector, FILE* file, int size) {
    for (int i = 0; i < size; i++) {
        fprintf(file, "%d\n", vector[i]);
    }
}

FILE* createFile() {
    FILE* file = fopen("file.txt", "rb+");
    if (!file) {
        file = fopen("file.txt", "wb+");
    }
    return file;
}

static void printVector(int* vector, int size) {
    for (int i = 0; i < size; i++) {
        printf("%d\n", vector[i]);
    }
    printf("\n");
}

static void freeVector(int* vector) {
    free(vector);
}

int main() {
    printf("Creating the vector:\n");
    int* vector = NULL; // Inicializado como NULL para ser preenchido em fillVector
    int size = 0;

    printf("Filling the vector:\n");
    fillVector(&vector, &size);  // Passa o endereço de vector e de size

    printf("Creating a file to save the content:\n");
    FILE* file = createFile();

    if (file) {
        printf("Saving the content in a file:\n");
        saveFile(vector, file, size);
        fclose(file);
    }
    else {
        printf("Failed to create or open the file.\n");
    }

    printf("Printing the vector on the screen:\n");
    printVector(vector, size);

    printf("Releasing the content of the vector:\n");
    freeVector(vector);

    return 0;
}


arquivo.h:


#ifndef INCLUDED_H_FAILED
#define INCLUDED_H_FAILED

#include <stdio.h>


// Funções para manipulação do vetor
int* createVector(int);
void fillVector(int**, int*);
void saveFile(int*, FILE*,int);
FILE* createFile();
static void printVector(int*,int);
static void freeVector(int*);

#endif // INCLUDED_H_FAILED

