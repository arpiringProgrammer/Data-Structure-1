#ifndef PRACTICEFILE_H
#define PRACTICEFILE_H

/*
Questão 04
Implemente um TAD Data utilizando ponteiros para representar uma data específica do ano,
armazenando dia, mês e ano como inteiros. O TAD deve incluir uma função de criação para alocar
dinamicamente uma data e inicializar seus valores, realizando validação para garantir que dia, mês e
ano formem uma data válida, retornando um ponteiro nulo caso os valores sejam inválidos, e uma
função de destruição para liberar a memória alocada. Além disso, implemente funções setters para
alterar individualmente dia, mês ou ano, realizando validação antes de atribuir os novos valores, e
funções getters para acessar os valores atuais de dia, mês e ano. O TAD deve também conter
funções para aumentar a data em um dia (inc) e diminuir a data em um dia (dec), uma função para
comparar duas datas, retornando verdadeiro se forem iguais e falso caso contrário, e uma função
para retornar a data no formato d\m\a. Por fim, escreva um programa que utilize e teste todas as
operações do TAD Data.
*/

typedef struct {
     int day;
     int month;
     int year;
}Date;

Date* alocateMemory();
int setDay(Date*, int);
int setMonth(Date*, int);
int setYear(Date*, int);
int getDay(Date*);
int getMonth(Date*);
int getYear(Date*);
int addDay(Date*, int, int, int);
int removeDay(Date*, int, int, int);
void showDate(Date*);
void releaseMemory(Date*);
int compareDates(Date*, Date*);
int validDate(int, int, int);
int ehBissexto(int);


void whereThingsHappen();

#endif


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "PracticeFile.h"


void whereThingsHappen() {
    Date* date1 = alocateMemory();
    if(!date1) {
        exit(1);
    }
    Date* date2 = alocateMemory();
    if(!date2) {
        exit(1);
    }
    printf("\nFirst date:\n");
    int valid = validDate(10, 10, 1996);
    printf("\nValid??? %d\n", valid);
    setDay(date1, 10);
    setMonth(date1, 10);
    setYear(date1, 1996);
    printf("\nSecond date:\n");
    valid = validDate(5, 5, 1999);
    printf("\nValid??? %d\n", valid);
    setDay(date2, 5);
    setMonth(date2, 5);
    setYear(date2, 1999);
    printf("\nShow first date:\n");
    showDate(date1);
    printf("\nShow second date:\n");
    showDate(date2);
    printf("\nadd 1 day.\n");
    addDay(date1, 10, 10, 1996);
    addDay(date2, 5, 5, 1999);
    printf("\nDate after adding one day:\n");
    showDate(date1);
    showDate(date2);
    printf("\nRemoving one day.\n");
    removeDay(date1, 10, 10, 1996);
    removeDay(date2, 5 ,5 , 1999);
    printf("\nDate after removing one day.\n");
    showDate(date1);
    showDate(date2);
    int areDatesEqual = compareDates(date1, date2);
    printf("\nAre dates equal???? %d\n", areDatesEqual);
    free(date1);
    free(date2);
}

int main() {

    whereThingsHappen();

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "PracticeFile.h"
#define INICIAL_SIZE 10


/*
Questão 04
Implemente um TAD Data utilizando ponteiros para representar uma data específica do ano,
armazenando dia, mês e ano como inteiros. O TAD deve incluir uma função de criação para alocar
dinamicamente uma data e inicializar seus valores, realizando validação para garantir que dia, mês e
ano formem uma data válida, retornando um ponteiro nulo caso os valores sejam inválidos, e uma
função de destruição para liberar a memória alocada. Além disso, implemente funções setters para
alterar individualmente dia, mês ou ano, realizando validação antes de atribuir os novos valores, e
funções getters para acessar os valores atuais de dia, mês e ano. O TAD deve também conter
funções para aumentar a data em um dia (inc) e diminuir a data em um dia (dec), uma função para
comparar duas datas, retornando verdadeiro se forem iguais e falso caso contrário, e uma função
para retornar a data no formato d\m\a. Por fim, escreva um programa que utilize e teste todas as
operações do TAD Data.
*/

Date* alocateMemory() {
    Date* date = (Date*)malloc(sizeof(Date) * 1);
    if(!date) {
        return NULL;
    }
    return date;
}

int ehBissexto(int ano) {
    if ((ano % 4 == 0 && ano % 100 != 0) || (ano % 400 == 0)) {
        return 1;
    } else {
        return 0;
    }
}

int validDate(int day, int month, int year) {
    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
        if(day > 0 && day <= 31) {
            return 1;
        } else {
            return 0;
        }
    }

    if(month == 4 || month == 6 || month == 9 || month == 11) {
        if(day > 0 && day <= 30) {
            return 1;
        } else {
            return 0;
        }
    }

    if(month == 2) {
        if(ehBissexto(year)) {
           if(day > 0 && day <= 29) {
             return 1;
           } else {
             return 0;
           }
        } else {
            if(day > 0 && day <= 28) {
                return 1;
            } else {
                return 0;
            }
        }
    }
    return 0;
}

int setDay(Date* date, int day) {
    date->day = day;
}

int setMonth(Date* date, int month) {
    date->month = month;
}

int setYear(Date* date, int year) {
    date->year = year;
}

int getDay(Date* date) {
    return date->day;
}

int getMonth(Date* date) {
    return date->month;
}

int getYear(Date* date) {
    return date->year;
}

int addDay(Date* date, int day, int month, int year) {
    int day = date->day;
    int month = date->month;
    int year = date->year;
    int validNumber = validDate(day, month, year);
    if(validNumber) {
        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
            if(month == 12) {
                if(day == 31) {
                    date->year++;
                    date->month = 1;
                    date->day = 1;
                } else {
                    date->day++;
                }
            } else {
                if(day == 31) {
                    date->month++;
                    date->day = 1;
                } else {
                    date->day++;
                }
            }
        } else if(month == 4 || month == 6 || month == 9 || month == 11) {
            if(day > 0 && day < 30) {
                date->day++;
            } else if (day == 30) {
                date->month++;
                date->day = 1;
            }
        } else if (month == 2) {
            if(day == 28 || day == 29) {
                date->month++;
                date->day = 1;
            } else {
                date->day++;
            }
        }
        return 1;
    } else {
        return 0;
    }
}

int removeDay(Date* date, int day, int month, int year) {
    int validDay = validDate(day, month, year);
    int previousMonth = month - 1;
    if(validDay) {
        if(day == 1) {
            if(previousMonth == 1 || previousMonth == 3 || previousMonth == 5 || previousMonth == 7 || previousMonth == 8 || previousMonth == 10 || previousMonth == 0) {
                if(previousMonth == 0) {
                    date->year--;
                    date->month = 12;
                } else {
                    date->month--;
                }
                date->day = 31;

            } else if (previousMonth == 4 || previousMonth == 6 || previousMonth == 9 || previousMonth == 11) {
                date->month--;
                date->day = 30;
            } else if (previousMonth == 2) {
                if(ehBissexto(year)) {
                    date->day = 29;
                } else {
                    date->day = 28;
                }
                date->month--;
            } 
        } else {
            date->day--;
        }
        return 1;
    } else {
        return 0;
    }
}

void showDate(Date* date) {
    printf("\n%d | %d | %d\n",date->day,date->month,date->year);
}

void releaseMemory(Date* date) {
    free(date);
}

int compareDates(Date* date1, Date* date2) {
    if(date1->day == date2->day && date1->month == date2->month && date1->year == date2->year) {
        return 1;
    } else {
        return 0;
    }
}

