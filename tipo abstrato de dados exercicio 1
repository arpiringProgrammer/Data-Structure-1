#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "Failed.h"


/*
1) Implemente um TAD Retangulo. Um retângulo tem os atributos altura e largura, uma função para
inicializar estes atributos com valores passados como parâmetro, funções que calculem e retornem o
perímetro e a área do retângulo e uma função que imprime as informações do retângulo (altura,
largura, perímetro e área). Em seguida, faça um programa para testar o seu TAD
*/


typedef Rectangle* rectangle;

void inicializeRectangle(rectangle r, int h, int w) {
	r->height = h;
	r->width = w;
}

int perimeter(rectangle r) {
	return 2 * (r->height + r->width);
}

int area(rectangle r) {
	return r->height * r->width;
}

void printInfo(rectangle r) {
	printf("\nheight:%d\n", getHeight(r));
	printf("\nwidth:%d\n", getWidth(r));
	printf("\nperimeter:%d\n", perimeter(r));
	printf("\narea:%d\n",area(r));
}

void destroy(rectangle r) {
	free(r);
}

void setHeight(rectangle r,int h) {
	r->height = h;
}

void setWidth(rectangle r,int w) {
	r->width = w;
}

int getHeight(rectangle r) {
	return r->height;
}

int getWidth(rectangle r) {
	return r->width;
}

--arquivo.h--

#ifndef INCLUDED_H_FAILED
#define INCLUDED_H_FAILED

typedef struct {
	int height;
	int width;
}Rectangle;

typedef Rectangle* rectangle;

void inicializeRectangle(rectangle, int, int);

int perimeter(rectangle);

int area(rectangle);

void printInfo(rectangle);

void destroy(rectangle);

void setHeight(rectangle, int);

void setWidth(rectangle , int );

int getHeight(rectangle);

int getWidth(rectangle);


#endif // INCLUDED_H_FAILED

--main.c--

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "Failed.h"



int main() {
	
	rectangle rec = (rectangle)malloc(sizeof(Rectangle));
	if (rec == NULL) {
		printf("an error ocurried while trying to open.\n");
		return 1;
	}

	inicializeRectangle(rec, 1, 2);

	printInfo(rec);

	setHeight(rec, 4);

	setWidth(rec, 5);

	printInfo(rec);

	destroy(rec);

	return 0;
}

